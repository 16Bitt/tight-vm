#! /usr/bin/env ruby

def usage
	puts "gendict INPUT HEADER CODE"
end

#Check that the number of arguments match our requirement
if ARGV.length != 3
	usage
	puts "Not enough arguments"
	exit -1
end

puts "Generating #{ARGV[1]} from #{ARGV[0]}"

infile	= ARGV[0]
outfile	= ARGV[1]
cfile	= ARGV[2]

#Check if the arguments were valid
if File.exists? outfile
	puts "warning: outfile exists"
end
if not File.exists? infile
	puts "error: infile does not exist"
	exit -1
end

#Open both files
infile	= File.open infile, "r"
outfile	= File.open outfile, "w"
cfile	= File.open cfile, "w"

#Initialize our reference table
operands = []

puts "Reading operands..."
#Read file data that we need
infile.each do |line|
	line = line.chomp

	#Remove repeated tabs
	for i in 0...10
		line.gsub! "\t\t", "\t"
	end
	
	#Add operand
	operands.push(line.split "\t")
end

#We are finished with infile
infile.close

header_name = ARGV[1].upcase.gsub(".", "_").gsub("/","_")
outfile.puts "#ifndef #{header_name}"
outfile.puts "#define #{header_name}\n"

puts "Defining operands..."
#Define all of the operands
count = 0
operands.each do |op|
	outfile.puts "#define  #{op[0].upcase} #{count}"
	count += 1
end

#Insert a newline
outfile.puts

outfile.puts "#define NUM_OPS #{count}\n"

#Create start of string reference table
cfile.print "const char* const op_str_val[] = { "
outfile.puts "extern const char* const op_str_val[];"

puts "Creating string table..."
#Fill in table
operands.each do |op|
	cfile.print '"'
	cfile.print "#{op[0]}"
	cfile.print '", '
end

#End string table
cfile.puts "};"

#Create start of length reference table
cfile.print "const int const op_len_val[] = { "
outfile.puts "extern const int const op_len_val[];"

puts "Creating length table..."
#Fill in table
operands.each do |op|
	cfile.print "#{op[1]}, "
end

#End length table
cfile.puts "};\n"

outfile.puts "#endif"
outfile.close
cfile.close

puts "Header generation for #{ARGV[0]} complete."
