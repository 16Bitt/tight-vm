{"name":"Tight-vm","tagline":"A small VM implementation in C","body":"### What is Tight VM?\r\nTight VM is a lightweight, portable virtual machine written in C. It is written to have no real dependencies on any libraries. The code is intended to be easily moved to bare-metal systems.\r\n\r\n### Why Would I Use Tight VM?\r\nIn operating systems development, it can be very frustrating to deal with memory management issues and a general lack of any sort of error checking. By using a lightweight VM that runs at the kernel level, all userland components can be run from within the virtual machine, providing stack traces and disassembly with very small overhead.\r\n\r\n### Dependencies\r\nBuilding this project requires Ruby, GNU Make and a C compiler. The Ruby is simply used to header files for the compilation.\r\n\r\n### Building\r\n```\r\n$ make\r\n$ sudo make install\r\n```\r\n\r\n### The Bytecode\r\nThis uses a very simplistic bytecode implementation.\r\n\r\n```\r\nconsti 1\r\nconsti 1\r\naddi\r\nprinti\r\n\r\n=> 2\r\n```\r\n\r\nAll of the bytecode encodings are generated dynamically by `gendict` in `utils/`. To add a new opcode, simply add the name and number of arguments separated by a tab to `opcodes.dict` and add the corresponding runtime code to `vm.c`\r\n\r\nHappy Hacking!\r\n--------------","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}